#include <gtest/gtest.h>
#include <span>
#include <merkle.h>

#include "test_util.h"


TEST(MerkleTest, RPC_to_internal) {
    std::vector<uint8_t> rpc = {0x01, 0x02, 0x03, 0x04};
    std::vector<uint8_t> internal(4);

    bulldozer::RPC_to_internal(std::span<uint8_t>(rpc), std::span<uint8_t>(internal));

    std::vector<uint8_t> expected = {0x04, 0x03, 0x02, 0x01};
    EXPECT_EQUAL_SPAN(internal, std::span<uint8_t>(expected));
}

TEST(MerkleTest, internal_to_RPC) {
    std::vector<uint8_t> internal = {0x01, 0x02, 0x03, 0x04};
    std::vector<uint8_t> rpc(4);

    bulldozer::internal_to_RPC(std::span<uint8_t>(internal), std::span<uint8_t>(rpc));

    std::vector<uint8_t> expected = {0x04, 0x03, 0x02, 0x01};
    EXPECT_EQUAL_SPAN(internal, std::span<uint8_t>(expected));
}

TEST(MerkleTest, MerkleTree_simple) {
    std::vector<uint8_t> tx1 = {
            0x8c, 0x14, 0xf0, 0xdb, 0x3d, 0xf1, 0x50, 0x12, 0x3e, 0x6f, 0x3d, 0xbb, 0xf3, 0x0f, 0x8b, 0x95,
            0x5a, 0x82, 0x49, 0xb6, 0x2a, 0xc1, 0xd1, 0xff, 0x16, 0x28, 0x4a, 0xef, 0xa3, 0xd0, 0x6d, 0x87
    };
    std::vector<uint8_t> tx2 = {
            0xff, 0xf2, 0x52, 0x5b, 0x89, 0x31, 0x40, 0x2d, 0xd0, 0x92, 0x22, 0xc5, 0x07, 0x75, 0x60, 0x8f,
            0x75, 0x78, 0x7b, 0xd2, 0xb8, 0x7e, 0x56, 0x99, 0x5a, 0x7b, 0xdd, 0x30, 0xf7, 0x97, 0x02, 0xc4
    };
    std::vector<uint8_t> tx3 = {
            0x63, 0x59, 0xf0, 0x86, 0x81, 0x71, 0xb1, 0xd1, 0x94, 0xcb, 0xee, 0x1a, 0xf2, 0xf1, 0x6e, 0xa5,
            0x98, 0xae, 0x8f, 0xad, 0x66, 0x6d, 0x9b, 0x01, 0x2c, 0x8e, 0xd2, 0xb7, 0x9a, 0x23, 0x6e, 0xc4
    };
    std::vector<uint8_t> tx4 = {
            0xe9, 0xa6, 0x68, 0x45, 0xe0, 0x5d, 0x5a, 0xbc, 0x0a, 0xd0, 0x4e, 0xc8, 0x0f, 0x77, 0x4a, 0x7e,
            0x58, 0x5c, 0x6e, 0x8d, 0xb9, 0x75, 0x96, 0x2d, 0x06, 0x9a, 0x52, 0x21, 0x37, 0xb8, 0x0c, 0x1d
    };
    std::vector<uint8_t> expected_root = {
            0xe4, 0x00, 0x06, 0x99, 0xfa, 0x1c, 0x52, 0xd8, 0xa3, 0x2e, 0x4b, 0x65, 0x83, 0x37, 0x84, 0x9f,
            0xca, 0xc6, 0xea, 0x39, 0x4c, 0x8a, 0x0f, 0xd2, 0xeb, 0x39, 0x6c, 0xd2, 0xa6, 0x26, 0xb6, 0x00
    };

    bulldozer::MerkleTree<uint8_t> tree(4);
    tree.add_txid(std::span<uint8_t>(tx1));
    tree.add_txid(std::span<uint8_t>(tx2));
    tree.add_txid(std::span<uint8_t>(tx3));
    tree.add_txid(std::span<uint8_t>(tx4));

    std::vector<uint8_t> root(32);
    tree.calculate_merkle_root(std::span<uint8_t>(root));

    EXPECT_EQUAL_SPAN(std::span<uint8_t>(root), std::span<uint8_t>(expected_root));
}


TEST(MerkleTest, MerkleTree_chainet_block_w_43_txs) {
    // This comes from a real transaction block in the chainet
    // each txid is in the array below in natural order (which differs on how it appears on the blockhain explorer)
    unsigned char txid_bulk[32*43] = {
            0x5b, 0xa6, 0x8e, 0x99, 0xa9, 0x09, 0x70, 0x3d, 0x90, 0x72, 0x59, 0x87, 0x4b, 0x0f, 0xa1, 0x0c, 0xa1, 0x32, 0x25, 0xf6, 0xa5, 0x40, 0xfa, 0x0e, 0x78, 0x7b, 0xcf, 0xe3, 0x01, 0xa0, 0xfc, 0x16,                                                                                         0x58, 0x60, 0x8b, 0x68, 0xa2, 0x9f, 0x55, 0xc3, 0x83, 0xee, 0x24, 0x18, 0x6c, 0xfd, 0xfa, 0x4a, 0x43, 0xf8, 0x03, 0xf9, 0x13, 0x01, 0x1e, 0xd4, 0x09, 0x0d, 0x2d, 0xa3, 0xe9, 0x99, 0x6d, 0x33,
            0x23, 0xfc, 0xe7, 0x40, 0xef, 0xd8, 0x53, 0x65, 0x76, 0xaa, 0x66, 0x23, 0xe7, 0xf0, 0x19, 0xe2, 0x4c, 0x27, 0xdf, 0x44, 0x0c, 0xbf, 0x7b, 0x27, 0x7a, 0xf2, 0x01, 0xdd, 0x70, 0x37, 0x99, 0x44,
            0xf6, 0xd3, 0x1b, 0x54, 0xfd, 0x8c, 0xbf, 0xda, 0x57, 0x0d, 0x23, 0x74, 0x92, 0xc6, 0x24, 0x45, 0xe9, 0xa8, 0x5e, 0x34, 0x0b, 0x63, 0xb1, 0xcc, 0x6e, 0x5f, 0x3b, 0x03, 0x5a, 0x82, 0xae, 0xd2,
            0xfb, 0x27, 0xad, 0xd7, 0x90, 0xc0, 0x0e, 0xbb, 0x66, 0x24, 0xda, 0x43, 0x78, 0xfd, 0x93, 0xfb, 0xcb, 0x4c, 0xbd, 0xa4, 0x32, 0x03, 0xfd, 0x85, 0xcd, 0x63, 0xc8, 0xc8, 0x23, 0xa8, 0x60, 0xa2,
            0x0e, 0xab, 0x83, 0xfb, 0x04, 0x12, 0xb7, 0xaf, 0x3a, 0x48, 0x17, 0xc0, 0x35, 0xab, 0x95, 0x65, 0x9a, 0xfa, 0x4e, 0x13, 0x82, 0x4f, 0xe4, 0xc3, 0x2f, 0xc0, 0xf6, 0xd0, 0x9a, 0x3d, 0x27, 0xbf,
            0xa5, 0xfb, 0x5d, 0x81, 0x68, 0x5f, 0xd7, 0xff, 0xa3, 0x59, 0xee, 0x8d, 0xdd, 0xae, 0x54, 0x19, 0x4b, 0xcf, 0xc8, 0x32, 0x91, 0xb7, 0x0f, 0x9f, 0xa5, 0x28, 0xbb, 0x46, 0x90, 0xe1, 0x15, 0xe1,
            0x12, 0x8d, 0x0a, 0x39, 0x6b, 0x81, 0x7d, 0x3f, 0xbb, 0x08, 0x18, 0xd6, 0xeb, 0x14, 0x62, 0x6f, 0x2b, 0xab, 0xbf, 0x6d, 0x20, 0x64, 0x03, 0x30, 0x99, 0x0c, 0x6d, 0x31, 0xa4, 0x1b, 0xe8, 0x3f,
            0x0c, 0x88, 0xa4, 0xae, 0xcc, 0x8e, 0x14, 0x40, 0xb7, 0xd2, 0xa3, 0x83, 0x88, 0xb2, 0xee, 0x07, 0x09, 0x30, 0x27, 0xc1, 0x3f, 0x1a, 0x87, 0x93, 0x4a, 0xaf, 0x4d, 0x5c, 0xdf, 0x34, 0x31, 0x95,
            0xe8, 0x0f, 0x69, 0x82, 0xdd, 0xca, 0xe3, 0x80, 0xb9, 0xff, 0x80, 0xe4, 0xd6, 0x92, 0xca, 0x1f, 0x4f, 0x83, 0xe4, 0xd6, 0xe6, 0x50, 0x5f, 0x72, 0xfd, 0xd7, 0x90, 0x84, 0xf3, 0xe3, 0x7b, 0x7d,
            0x37, 0x17, 0x39, 0xeb, 0xa0, 0x20, 0x41, 0x49, 0x74, 0x2b, 0xed, 0xff, 0x70, 0x51, 0x28, 0x09, 0xd2, 0x5a, 0x4a, 0x04, 0xd7, 0x2b, 0x36, 0x39, 0x12, 0x79, 0x89, 0xdd, 0x3c, 0xb6, 0xb4, 0x7d,
            0x12, 0x7d, 0x63, 0xe0, 0x8d, 0xe9, 0xa1, 0xfc, 0xb9, 0x6b, 0x3f, 0x03, 0xfe, 0xe3, 0x2a, 0x52, 0x0a, 0x53, 0xc8, 0x4c, 0xf6, 0x90, 0xed, 0xbc, 0x64, 0xc6, 0xae, 0x44, 0xfb, 0xd2, 0xb4, 0x5c,
            0xf8, 0xf7, 0x04, 0x7a, 0x77, 0x59, 0xd1, 0x5d, 0x6a, 0x40, 0xaa, 0x0e, 0x41, 0xdf, 0x7c, 0x09, 0x46, 0x06, 0xce, 0x40, 0xcd, 0x81, 0x79, 0x53, 0x11, 0x6e, 0xf8, 0x29, 0x35, 0x6c, 0x33, 0xbe,
            0x1f, 0x00, 0xfa, 0xee, 0x4c, 0x71, 0x57, 0xfa, 0x29, 0xff, 0xa4, 0x9c, 0x7e, 0xa0, 0xc2, 0x65, 0x09, 0x07, 0xcb, 0x73, 0xc0, 0xca, 0x19, 0x8d, 0xa6, 0xdd, 0x24, 0x27, 0xea, 0x1a, 0x72, 0xa8,
            0x1c, 0x56, 0xab, 0x7c, 0xb5, 0xf4, 0x06, 0x60, 0xbe, 0x8b, 0xa1, 0x96, 0x37, 0x02, 0xaa, 0xe0, 0x01, 0x9f, 0xdd, 0xdf, 0x39, 0x1d, 0xb7, 0xc3, 0x27, 0xbe, 0x18, 0x88, 0x1c, 0x94, 0x9e, 0x33,
            0x6a, 0xe8, 0x6e, 0x26, 0x18, 0x76, 0x6e, 0x22, 0x59, 0x48, 0xed, 0x5b, 0x57, 0x55, 0xb9, 0xc2, 0xda, 0x5a, 0x1f, 0x99, 0x76, 0xe1, 0x77, 0x30, 0x60, 0x39, 0x54, 0xe1, 0xd0, 0xa6, 0xe7, 0x7e,
            0x49, 0xb9, 0xc5, 0x9d, 0xa5, 0x7e, 0x7c, 0x52, 0xc3, 0x8e, 0x96, 0x66, 0xd9, 0x96, 0x21, 0x7e, 0x3a, 0x0d, 0xf6, 0x54, 0xf1, 0xcf, 0x66, 0x66, 0x4d, 0x91, 0xd8, 0xe7, 0x14, 0x18, 0x79, 0x00,
            0xc7, 0xb7, 0xdf, 0x15, 0x56, 0x01, 0xb2, 0x06, 0x0c, 0x5b, 0x12, 0x69, 0xa3, 0x5b, 0xe5, 0xf6, 0x11, 0xfc, 0x83, 0x6a, 0x9a, 0xda, 0xa6, 0xb3, 0xca, 0x1a, 0x90, 0x5f, 0xab, 0xa4, 0xa0, 0x87,
            0x17, 0x5f, 0x85, 0xc8, 0x23, 0xca, 0xdb, 0x53, 0x25, 0x9a, 0x2c, 0xa1, 0xe2, 0x1b, 0x4e, 0x00, 0x74, 0xa6, 0xa6, 0x6c, 0xd4, 0xcf, 0x12, 0x16, 0x1a, 0x6f, 0xec, 0x85, 0xf4, 0x2a, 0x55, 0x30,
            0x0e, 0x64, 0x91, 0x18, 0x45, 0x41, 0x61, 0x38, 0x15, 0x00, 0x25, 0xaa, 0x9f, 0x81, 0x47, 0xaa, 0x32, 0x08, 0x3b, 0xd3, 0xd0, 0xd1, 0xad, 0xf8, 0x3c, 0x07, 0xcc, 0x1e, 0x06, 0xf8, 0x68, 0xf3,
            0x2b, 0x53, 0x39, 0xf0, 0xac, 0x27, 0xc5, 0x4d, 0xe1, 0xe9, 0x11, 0xd0, 0x93, 0x11, 0xd3, 0x8d, 0x8f, 0xe8, 0x04, 0xf2, 0xf4, 0xa1, 0x17, 0x0d, 0xb3, 0xc7, 0xcb, 0x67, 0xa6, 0xd5, 0xf8, 0xaa,
            0xbe, 0x09, 0x8d, 0xd4, 0x45, 0x5d, 0x41, 0x1f, 0x85, 0xfe, 0x0b, 0xdd, 0x84, 0x7b, 0x23, 0xa5, 0xd9, 0xd1, 0x8f, 0x33, 0x3f, 0xcc, 0x00, 0x00, 0x1a, 0xdc, 0x01, 0x5d, 0x2a, 0x32, 0x3c, 0x86,
            0x00, 0x6b, 0xf0, 0xbb, 0x61, 0x3c, 0x33, 0x9d, 0xd2, 0xd0, 0x1d, 0xf0, 0x82, 0x07, 0x85, 0x8b, 0x47, 0x9e, 0x7d, 0xf7, 0x8a, 0x4f, 0xc3, 0x5d, 0xf9, 0xae, 0xd0, 0x1c, 0x17, 0xcb, 0x3e, 0xb7,
            0x24, 0xc3, 0x1b, 0x46, 0x79, 0x24, 0x11, 0xe7, 0xd4, 0xa9, 0xc4, 0xd8, 0xb7, 0x07, 0xf3, 0x25, 0x35, 0xef, 0x59, 0xd6, 0x6e, 0x18, 0xdd, 0x2b, 0xc5, 0xff, 0x8b, 0x9d, 0x2d, 0xc2, 0x11, 0x19,
            0xc2, 0x89, 0xcb, 0x83, 0xcc, 0x8c, 0x58, 0x05, 0xb1, 0x27, 0xb7, 0x48, 0x61, 0xea, 0x4b, 0x3c, 0x0c, 0xd2, 0x7d, 0x48, 0xe2, 0x38, 0x06, 0x8a, 0x22, 0x49, 0x8b, 0x12, 0x3c, 0xa1, 0x19, 0xc8,
            0xf6, 0x72, 0x92, 0x7a, 0x83, 0x99, 0x25, 0x4e, 0x2d, 0xfa, 0xc2, 0xf7, 0xae, 0xa0, 0xc2, 0x8c, 0x4d, 0x47, 0xe2, 0x7e, 0x11, 0xfb, 0x6d, 0x0d, 0xaa, 0x16, 0x4c, 0xf9, 0x02, 0x27, 0xfa, 0x33,
            0x46, 0xa0, 0x83, 0x6e, 0xd0, 0x4f, 0x68, 0xfc, 0xfb, 0xe3, 0x30, 0x26, 0x48, 0x0e, 0x4a, 0x0b, 0x5e, 0x28, 0xd6, 0x7f, 0x3a, 0x8d, 0x0a, 0xff, 0xea, 0xa8, 0x59, 0xc3, 0xf9, 0xab, 0xd8, 0x13,
            0x69, 0x54, 0xaa, 0xc7, 0x5b, 0xd7, 0x93, 0xa8, 0xd4, 0x6f, 0x59, 0xcb, 0x60, 0x44, 0xc2, 0x3b, 0x20, 0xe4, 0x8f, 0xf4, 0x67, 0x2f, 0xb4, 0x25, 0xf6, 0x2a, 0xfa, 0x10, 0x32, 0x35, 0x75, 0xbd,
            0xb8, 0x4a, 0x3e, 0xee, 0x78, 0xff, 0xf7, 0xcb, 0x43, 0xcf, 0xd0, 0xb2, 0x25, 0xe5, 0xca, 0x62, 0xe4, 0x3a, 0x82, 0x8f, 0x2f, 0x3b, 0x6f, 0x21, 0xf8, 0x57, 0x0b, 0x1f, 0xed, 0xde, 0xfd, 0xc6,
            0x57, 0x20, 0xc2, 0xd8, 0x26, 0x00, 0x97, 0x1a, 0xb9, 0x4d, 0x7e, 0x6c, 0x4d, 0x19, 0xa6, 0x9d, 0xd7, 0xa4, 0x4d, 0x8e, 0x23, 0xfb, 0x32, 0x59, 0x5c, 0xac, 0x28, 0x55, 0x54, 0x21, 0x45, 0xed,
            0x76, 0xbb, 0x7e, 0xfb, 0x51, 0x4b, 0xe6, 0xbc, 0x26, 0x64, 0x6a, 0x8d, 0x62, 0x79, 0x62, 0x08, 0x32, 0xfb, 0x47, 0xc5, 0xf8, 0x60, 0xd2, 0x62, 0x0f, 0xba, 0x04, 0xf1, 0xd2, 0x5f, 0xe3, 0x38,
            0xe6, 0x74, 0x1e, 0x2d, 0x55, 0x7b, 0x07, 0x84, 0xc7, 0x42, 0xe6, 0xae, 0xfd, 0xd1, 0x8b, 0xc4, 0xed, 0x92, 0x0e, 0xa5, 0xd4, 0x1b, 0x76, 0x14, 0xc1, 0x6c, 0x05, 0x0d, 0xbb, 0x0a, 0x15, 0x67,
            0x3c, 0x51, 0xcd, 0x85, 0xf9, 0x4f, 0xee, 0x12, 0x20, 0xd0, 0x1a, 0x50, 0xa0, 0xbb, 0x5d, 0xcf, 0x56, 0xba, 0xeb, 0x8c, 0x40, 0x18, 0x96, 0x98, 0xd5, 0x73, 0x64, 0xf0, 0x2e, 0x05, 0x88, 0x06,
            0xc0, 0x26, 0x0b, 0xa8, 0xfb, 0xcb, 0xf3, 0x7a, 0x50, 0xff, 0xaf, 0xa9, 0xe3, 0xec, 0x0f, 0x12, 0x2c, 0xb6, 0x48, 0x51, 0x20, 0x72, 0xa2, 0x57, 0x1b, 0x14, 0xaf, 0x23, 0x4e, 0xd1, 0x8f, 0xa8,
            0x6b, 0x78, 0x43, 0x0e, 0xb2, 0xe4, 0x05, 0xcf, 0x31, 0x00, 0xa7, 0x28, 0x86, 0xf4, 0x74, 0x49, 0x88, 0x47, 0x91, 0x3d, 0xe8, 0x37, 0x6c, 0x39, 0xee, 0x62, 0xe5, 0x34, 0x4e, 0x6d, 0x70, 0xbe,
            0xea, 0xaa, 0xa6, 0xac, 0x31, 0xdf, 0x5e, 0x2a, 0xc0, 0xf7, 0x23, 0xfe, 0x4a, 0x82, 0xad, 0x71, 0x98, 0xfd, 0x1d, 0xcb, 0x38, 0x83, 0x13, 0x76, 0xdd, 0x70, 0xd9, 0x0b, 0xd4, 0xc1, 0x4e, 0x1c,
            0x1c, 0xeb, 0x38, 0x93, 0x51, 0xf6, 0x88, 0x23, 0xc9, 0xa4, 0xc8, 0xef, 0xa0, 0xa0, 0x83, 0x0a, 0x05, 0xae, 0x44, 0xdf, 0x1e, 0x10, 0xab, 0xc2, 0xae, 0x7f, 0xd4, 0x69, 0x2c, 0xc1, 0xfe, 0x1c,
            0x1f, 0xa5, 0x15, 0x93, 0xce, 0x1e, 0x5b, 0xc4, 0xcd, 0x5f, 0x27, 0x7c, 0xb3, 0x79, 0x6e, 0x29, 0x66, 0xb7, 0x0b, 0x16, 0xad, 0x59, 0x71, 0xb3, 0x9d, 0xb8, 0x88, 0xcb, 0xe7, 0x9c, 0x80, 0xbc,
            0x77, 0x1a, 0x94, 0x2a, 0x8f, 0xba, 0x70, 0x00, 0x80, 0x45, 0x4b, 0x58, 0xb1, 0x6c, 0x5a, 0xaa, 0x04, 0x19, 0x5f, 0x29, 0x3f, 0x94, 0xda, 0xf1, 0x28, 0xd6, 0x63, 0xba, 0x43, 0x99, 0x64, 0xb8,
            0x66, 0x3a, 0x61, 0x12, 0x1a, 0x78, 0x18, 0x0b, 0xed, 0xc4, 0x91, 0x26, 0xe3, 0x9d, 0x51, 0xe0, 0x01, 0x16, 0xf2, 0x70, 0xa6, 0x31, 0x2b, 0x25, 0x0f, 0xcb, 0x2c, 0x5f, 0x64, 0x97, 0x53, 0xf6,
            0x6d, 0xbc, 0xb3, 0x51, 0x93, 0xf9, 0x8a, 0x34, 0x8f, 0xea, 0x96, 0xf8, 0x55, 0x08, 0xec, 0xd7, 0x64, 0x1c, 0x2c, 0x7d, 0x85, 0xa4, 0xfa, 0xe3, 0x61, 0x4d, 0x62, 0x38, 0x05, 0x2d, 0x07, 0x46,
            0x84, 0x8e, 0xff, 0xd0, 0x45, 0xe5, 0x66, 0x8e, 0x33, 0x14, 0xda, 0xfd, 0x24, 0x5c, 0x45, 0xbe, 0xc0, 0xfa, 0x80, 0x77, 0xc3, 0x85, 0xd5, 0x1f, 0x3d, 0xc7, 0xca, 0x81, 0x19, 0xbe, 0x47, 0x6b,
            0xc1, 0xbc, 0x8e, 0xbd, 0xcd, 0x94, 0xaf, 0xb9, 0x15, 0x46, 0xf2, 0xbc, 0x06, 0xb1, 0x3c, 0x3d, 0xb9, 0xe1, 0x53, 0xae, 0x49, 0x50, 0xcb, 0x5a, 0xcb, 0xc1, 0xca, 0x2b, 0xd6, 0x12, 0x4d, 0x96
    };
    std::vector<uint8_t> expected_root = {
            0xf0, 0x3f, 0xc9, 0x2e, 0x36, 0x68, 0x32, 0xdd, 0x5c, 0x86, 0x13, 0x96, 0x94, 0x77, 0xa1, 0x21, 0x0c, 0xb3, 0xc8, 0x6f, 0xc3, 0x9b, 0x20, 0x25, 0x7c, 0x48, 0x6c, 0x21, 0x2d, 0xed, 0xbc, 0x26
    };

    bulldozer::MerkleTree<uint8_t> tree(43);


    for (int i = 0; i < 43; i++) {
        tree.add_txid(std::span<uint8_t>(txid_bulk + i*32, 32));
    }

    std::vector<uint8_t> root(32);
    tree.calculate_merkle_root(std::span<uint8_t>(root));

    EXPECT_EQUAL_SPAN(std::span<uint8_t>(root), std::span<uint8_t>(expected_root));
}
